export default {"dbmon-example":{"source":"tests/dummy/app/routes/examples/dbmon/template.hbs","content":"        <div class=\"table-wrapper\">\n          <table class=\"table table-striped latest-data\">\n            <tbody>\n              <VerticalCollection\n                @items={{@model.data.databases}}\n                @containerSelector=\".table-wrapper\"\n                @key=\"id\"\n\n                @estimateHeight={{37}}\n                @staticHeight={{true}}\n                @bufferSize={{5}}\n              as |db|>\n                <Examples::Dbmon::Components::DbmonRow @tagName=\"tr\" @db={{db}} />\n              </VerticalCollection>\n            </tbody>\n          </table>\n        </div>"},"flexible-layout-example":{"source":"tests/dummy/app/routes/examples/flexible-layout/template.hbs","content":"      <div class=\"table-wrapper dark\">\n        <VerticalCollection @items={{@model.data.numbers}}\n          @estimateHeight={{270}}\n          @firstReached={{this.loadAbove}}\n          @lastReached={{this.loadBelow}}\n          @bufferSize={{0}} as |item index|\n          >\n          <NumberSlide @isDynamic={{true}} @item={{item}} @index={{index}} />\n        </VerticalCollection>\n      </div>"},"infinite-scroll-example":{"source":"tests/dummy/app/routes/examples/infinite-scroll/template.hbs","content":"      <div class=\"table-wrapper dark\">\n        <VerticalCollection\n          @items={{@model.data.numbers}}\n          @estimateHeight={{90}}\n          @staticHeight={{true}}\n          @bufferSize={{5}}\n          @firstReached={{action \"loadAbove\"}}\n          @lastReached={{action \"loadBelow\"}} as |item index|\n        >\n          <NumberSlide @item={{item}} @index={{index}} />\n        </VerticalCollection>\n      </div>"},"scrollable-body-example":{"source":"tests/dummy/app/routes/examples/scrollable-body/template.hbs","content":"      <VerticalCollection\n        @items={{@model.data.numbers}}\n        @estimateHeight={{40}}\n        @containerSelector=\"body\" as |item index|\n      >\n      <NumberSlide @isDynamic={{true}} @item={{item}} @index={{index}} />\n      </VerticalCollection>"},"vertical-collection-defaults-example":{"source":"tests/dummy/app/routes/settings/snippets/defaults.js","content":"{\n// basics\n  tagName: '',\n\n  // required\n\n  // Positional parameter, e.g.\n  //\n  // `<VerticalCollection @items={{items}} as |item|>`\n  //\n  // Note: An alias for this property named `content`\n  // exists solely for Ember 1.11 support. The alias\n  // should not be used with any more recent version\n  // of Ember and will be removed in future versions.\n  items: null,\n\n  // Can be an integer, but also attempts to work\n  // with em, rem, px, and percentage values for things\n  // like flex.\n  estimateHeight: null,\n\n  // performance\n\n  // This key is the property used by the collection\n  // to determine whether an array mutation is an\n  // append, prepend, or complete replacement. It is\n  // also the key that is passed to the actions, and\n  // can be used to restore scroll position with\n  // `idForFirstItem`.\n  //\n  // Note: `@identity` is a randomly generated value.\n  // If you want to save the id, use a unique property\n  // on your model (e.g. the `id` field on Ember Data\n  // models)\n  key: '@identity',\n\n  // Determines the rendering strategy. If set to true,\n  // will use a simpler strategy that is much faster,\n  // but requires all item heights to be the same.\n  staticHeight: false,\n\n  // The size of the buffer before and after the\n  // collection. Represents a static number of components\n  // that will be added, such that:\n  //\n  // numComponents === Math.ceil(containerHeight / estimateHeight) + (bufferSize * 2) + 1\n  bufferSize: 0,\n\n  // actions\n\n  // Each action has the signature (item, index) => {}\n  firstReached: null,\n  lastReached: null,\n  firstVisibleChanged: null,\n  lastVisibleChanged: null,\n\n  // initial state\n\n  // Id for the first item to be rendered. Will be the\n  // top item by default, and the bottom item if\n  // `renderFromLast` is set.\n  idForFirstItem: null,\n\n  // Tells the collection to render from the last item.\n  renderFromLast: false,\n\n  // scroll setup\n\n  // Selector for the scrollContainer. The collection\n  // will traverse its ancestry to find the first element\n  // that matches the selector. Defaults to '*', which\n  // will match the immediate parent of the collection.\n  containerSelector: '*'\n}"}}